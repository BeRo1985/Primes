program PrimePascal;
// benjaminrosseaux_5760of30030_epar by Benjamin 'BeRo' Rosseaux - benjamin@rosseaux.de
// based on PrimeC danielspaangberg_5760of30030_epar
// Should work with lastst unstable FreePascal SVN/GIT Trunk "and" lastest stable Delphi versions
// The optional define UsePasMP activates simple mutli-passes-at-once parallel
// processing on basis of my PasMP project
{$ifdef fpc}
 {$mode delphi}
 {$optimization on}
 {$optimization level4}
{$else}
 {$legacyifend on}
 {$optimization on}
{$endif}
{$if defined(Win32) or defined(Win64) or defined(Windows)}
 {$apptype console}
{$ifend}

// {$define UsePasMP} // <= uncomment this for to enable parallel processing

// Turn off slow-down stuff
{$assertions off}
{$rangechecks off}
{$overflowchecks off}

uses {$if defined(Win32) or defined(Win64) or defined(Windows)}Windows,{$ifend}SysUtils,Classes,Math{$ifdef UsePasMP},PasMP{$endif};

type TNativeUInt={$if declared(SizeUInt)}SizeUInt{$else}NativeInt{$ifend};
     PNativeUInt=^TNativeUInt;

     TNativeUInts=array[0..0] of TNativeUInt;
     PNativeUInts=^TNativeUInts;

const MaxInts=TNativeUInt(1000000);

{$ifdef cpu64}
const MASK=$3f;
      SHIFT=6;
{$else}
const MASK=$1f;
      SHIFT=5;
{$endif}

function usqrt(const n:TNativeUInt):TNativeUInt;
var Last,PreLast:TNativeUInt;
begin
 Last:=0;
 PreLast:=TNativeUInt(not TNativeUInt(0));
 result:=n shr 1;
 while (result<>Last) and (result<>PreLast) do begin
  PreLast:=Last;
  Last:=result;
  result:=(result+(n div result)) shr 1;
 end;
end;

const CountSteps=5760;

      Steps:array[0..CountSteps-1] of TNativeUInt=(
       8,1,2,3,1,3,2,1,2,3,3,1,3,2,1,3,2,3,4,2,1,2,1,2,7,
       2,3,1,5,1,3,3,2,3,3,1,5,1,2,1,6,6,2,1,2,3,1,5,3,3,
       3,1,3,2,1,3,2,7,2,1,2,3,4,3,5,1,2,3,1,3,3,3,2,3,1,
       3,2,4,5,1,5,1,2,1,2,3,4,2,1,2,6,4,2,1,3,2,3,6,1,2,
       1,6,3,2,3,3,3,1,3,5,1,2,3,1,3,3,2,1,5,1,5,1,2,3,3,
       1,3,3,2,3,4,3,2,1,3,2,3,4,2,1,3,2,4,3,2,4,2,3,4,5,
       1,5,1,3,2,1,2,1,5,1,5,1,2,1,2,7,2,1,2,3,3,1,3,2,4,
       5,4,2,1,2,3,4,3,2,3,3,3,1,3,3,2,1,2,3,1,5,1,2,1,5,
       1,5,1,3,2,4,3,2,1,2,3,3,4,2,1,3,5,4,2,1,3,2,4,5,3,
       1,2,4,3,3,2,1,2,3,1,3,2,3,1,5,6,1,2,1,2,3,1,3,2,1,
       2,6,1,3,3,5,3,4,2,1,2,1,2,4,3,6,2,3,1,6,2,1,2,3,4,
       2,1,2,1,6,5,1,2,1,2,3,1,5,1,2,3,4,3,2,1,3,2,3,4,2,
       3,1,2,4,3,2,3,1,2,3,1,3,3,2,3,3,4,3,2,1,5,1,5,1,2,
       1,5,1,3,2,1,5,3,1,3,2,1,3,2,3,4,3,2,1,6,5,3,1,2,3,
       1,6,2,1,2,4,3,2,1,2,1,5,1,5,3,1,2,3,1,3,2,1,5,3,1,
       3,2,6,3,4,3,2,1,2,4,3,2,3,1,2,3,4,3,3,2,3,1,3,2,1,
       2,1,5,6,1,2,6,1,3,2,1,2,3,3,1,6,3,2,9,1,2,1,2,4,3,
       2,3,1,2,4,3,3,2,1,2,3,1,3,2,1,2,6,1,6,3,2,3,1,3,2,
       3,3,3,1,3,2,1,3,2,3,4,2,1,2,1,2,7,2,3,1,5,1,3,3,2,
       1,5,1,5,1,2,7,5,1,2,1,2,3,1,3,5,3,3,1,5,1,3,2,3,4,
       2,1,2,3,4,3,5,1,2,3,1,3,3,2,1,2,3,1,3,2,1,3,5,1,5,
       3,1,2,3,4,2,1,2,6,1,3,2,1,3,2,3,6,1,2,1,2,4,3,2,3,
       1,5,1,3,5,3,3,1,3,2,1,2,1,5,1,6,2,3,3,1,6,2,3,3,1,
       3,2,1,3,2,7,2,1,3,2,4,3,2,3,1,2,3,4,3,3,5,1,3,2,3,
       1,5,1,5,1,2,1,2,4,3,2,1,2,3,3,4,2,4,2,3,4,2,1,2,1,
       6,3,2,3,3,3,1,3,3,2,1,2,3,1,3,3,2,1,5,1,5,1,3,2,3,
       1,3,2,1,2,3,7,2,1,3,5,4,2,1,2,1,2,4,5,4,2,4,3,5,1,
       2,3,1,3,2,3,1,5,1,5,1,2,1,2,3,4,2,1,2,3,3,1,3,3,3,
       5,4,2,1,2,3,4,3,2,4,2,3,1,3,3,2,1,2,3,6,1,2,1,5,1,
       5,1,2,1,2,4,5,1,2,3,4,3,2,1,3,2,3,4,2,4,2,4,3,2,3,
       1,2,3,1,3,3,2,3,3,1,3,3,2,1,5,6,1,2,1,2,3,1,3,2,1,
       8,1,3,2,1,5,3,4,2,1,2,1,6,3,5,1,2,3,1,6,2,1,2,4,3,
       2,1,2,1,6,5,3,1,2,3,1,3,2,1,2,3,3,1,3,2,1,5,3,4,5,
       1,2,4,3,2,3,1,2,3,1,3,3,3,2,3,4,2,1,2,1,5,6,1,2,1,
       5,1,3,2,1,2,3,3,1,5,1,3,2,7,3,2,1,2,4,5,3,1,2,3,1,
       3,3,2,1,2,4,3,2,1,2,6,1,6,2,1,2,3,1,3,2,1,5,3,1,3,
       2,4,2,3,4,2,1,2,1,2,7,2,3,1,5,4,3,2,1,2,3,1,5,1,2,
       1,6,5,1,2,3,3,1,3,2,3,3,3,1,3,3,3,2,3,6,1,2,3,4,3,
       5,1,2,4,3,3,2,1,2,3,1,3,2,1,3,5,1,5,1,3,2,3,4,2,3,
       6,1,3,2,1,3,2,3,6,1,2,1,2,7,2,3,1,2,3,1,3,5,1,5,1,
       3,2,1,2,6,1,5,1,2,3,3,1,3,3,2,3,3,1,5,1,3,2,3,4,2,
       1,3,2,4,3,2,3,1,2,3,4,3,2,1,5,1,3,2,1,3,5,1,5,3,1,
       2,4,3,2,1,2,3,3,1,3,2,4,2,3,4,2,1,2,1,2,4,3,2,3,6,
       1,3,3,2,3,3,1,3,2,1,2,1,5,1,6,3,2,3,1,5,1,2,3,3,4,
       2,1,3,9,2,1,2,1,2,4,5,3,1,2,4,3,3,3,2,3,1,3,2,3,1,
       5,1,5,1,2,1,2,3,1,3,2,1,2,3,3,4,3,3,2,3,4,2,1,2,1,
       6,3,2,6,3,1,3,3,2,1,2,3,4,3,2,1,5,1,5,1,2,1,2,3,1,
       5,1,2,3,4,3,2,1,3,2,3,4,2,3,1,2,4,3,2,4,2,3,1,3,5,
       3,3,1,3,3,2,1,5,1,5,1,2,1,2,3,4,2,1,5,3,1,3,2,1,3,
       5,4,2,1,2,7,3,2,3,1,2,3,1,6,2,1,2,4,5,1,2,1,5,1,5,
       3,1,2,4,3,2,1,2,3,3,1,3,2,1,5,3,4,3,3,2,4,3,2,3,1,
       2,3,1,3,3,3,2,3,1,3,2,1,2,1,5,6,1,2,1,5,1,3,2,1,2,
       6,1,5,1,5,7,2,1,2,1,2,4,3,5,1,2,3,1,6,2,1,2,3,1,3,
       2,1,2,7,6,2,1,2,3,1,3,2,1,2,3,3,1,3,2,1,3,2,3,4,2,
       3,1,2,7,2,3,1,5,1,3,3,2,1,2,3,6,1,2,1,6,5,1,2,1,5,
       1,3,2,3,3,3,1,3,2,1,3,2,3,4,3,2,3,4,8,1,2,3,1,3,3,
       2,1,2,4,3,2,1,3,5,1,5,1,2,1,2,3,4,2,1,8,1,3,2,4,2,
       3,6,1,2,1,2,4,3,2,3,1,2,3,4,5,1,2,3,1,3,2,1,2,1,5,
       1,5,1,2,3,3,1,3,3,2,3,3,1,3,3,3,2,3,6,1,3,2,4,3,2,
       3,1,2,7,3,2,1,5,1,3,2,1,2,1,5,1,5,1,3,2,4,3,2,3,3,
       3,1,3,2,4,2,3,4,2,1,2,1,2,7,2,3,3,3,1,3,3,2,1,5,1,
       3,2,1,2,6,1,5,1,3,2,3,1,3,3,2,3,3,6,1,3,5,4,2,1,2,
       1,2,4,5,3,1,2,4,3,3,2,1,2,3,1,3,2,4,5,1,5,3,1,2,3,
       1,3,2,1,2,3,3,1,3,3,3,2,3,4,2,1,2,1,2,4,3,2,4,5,1,
       3,3,2,3,3,4,2,1,2,1,5,1,6,2,1,2,3,1,5,1,2,3,4,3,2,
       1,3,2,7,2,3,1,2,4,3,2,3,1,2,3,1,3,3,5,3,1,3,5,1,5,
       1,5,1,2,1,2,3,1,3,2,1,5,3,4,2,1,3,2,3,4,2,1,2,1,6,
       3,2,3,3,3,1,6,2,1,2,4,3,3,2,1,5,1,5,3,1,2,3,1,3,2,
       1,2,3,4,3,2,1,5,3,4,3,2,1,2,4,3,2,4,2,3,1,3,6,2,3,
       1,3,2,1,2,1,5,6,1,2,1,5,4,2,1,2,3,3,1,5,1,3,9,2,1,
       2,3,4,3,2,3,1,2,3,1,3,3,2,1,2,3,1,5,1,2,6,1,6,2,1,
       2,4,3,2,1,2,3,3,1,3,2,1,3,2,3,4,2,1,3,2,7,2,3,1,5,
       1,3,3,2,1,2,3,1,5,1,2,1,11,1,2,1,2,3,1,3,2,3,6,1,3,
       2,1,5,3,4,2,1,2,3,4,3,5,1,2,3,1,6,2,1,2,3,1,3,2,1,
       3,6,5,1,2,1,2,3,4,2,1,2,6,1,3,2,1,3,2,3,6,3,1,2,4,
       3,2,3,1,2,3,1,3,5,1,2,3,4,2,1,2,1,5,1,5,1,2,6,1,3,
       3,2,3,3,1,3,2,1,3,2,3,4,3,3,2,4,5,3,1,2,3,4,3,2,1,
       6,3,2,1,2,1,5,1,5,1,2,1,2,4,3,2,1,5,3,1,3,2,4,2,3,
       4,2,1,2,1,2,4,3,2,3,3,3,4,3,2,1,2,3,1,3,2,1,2,1,5,
       1,5,1,5,3,1,3,2,1,2,3,3,4,3,3,5,6,1,2,1,2,4,5,3,1,
       2,4,3,3,2,1,2,3,1,3,2,3,1,5,1,5,1,3,2,3,1,3,2,3,3,
       3,1,3,3,3,2,3,4,2,1,2,1,2,7,2,4,2,3,1,3,3,2,1,5,4,
       2,1,2,6,1,5,1,2,1,2,3,1,6,2,3,4,5,1,3,2,3,4,2,3,1,
       2,4,3,2,3,1,2,3,1,3,3,2,3,3,1,3,3,3,5,1,5,3,1,2,3,
       1,3,2,1,5,3,1,3,2,1,3,2,3,4,2,1,2,1,6,3,2,3,1,5,1,
       6,2,3,4,3,2,1,2,1,5,1,8,1,2,3,1,5,1,2,3,3,1,3,2,1,
       5,7,3,2,1,2,4,3,2,3,1,2,3,1,3,3,3,2,3,1,3,2,3,1,5,
       6,1,2,1,5,1,3,2,1,2,3,3,6,1,3,2,7,2,1,2,1,6,3,2,3,
       3,3,1,3,3,2,1,2,3,1,3,3,2,6,1,6,2,1,2,3,1,3,2,1,2,
       3,4,3,2,1,3,2,3,4,2,1,2,1,2,7,2,4,5,1,3,5,1,2,3,1,
       5,1,2,1,6,5,1,2,1,2,3,4,2,3,3,3,1,3,2,1,3,5,4,2,1,
       2,3,4,3,5,1,2,3,1,3,3,2,1,2,3,1,5,1,3,5,1,5,1,2,1,
       2,7,2,1,2,6,1,3,2,1,3,2,3,6,1,3,2,4,3,2,3,1,2,3,1,
       3,5,1,2,3,1,3,2,1,2,1,5,6,1,2,3,3,1,3,3,2,6,1,3,2,
       1,5,3,4,2,1,3,2,4,3,5,1,2,3,7,2,1,5,1,3,2,1,2,1,6,
       5,1,2,1,2,4,3,2,1,2,3,3,1,3,2,4,2,3,4,2,3,1,2,4,3,
       2,3,3,3,1,3,3,2,1,2,3,4,2,1,2,1,5,1,5,1,3,5,1,3,2,
       1,2,3,3,4,2,1,3,5,4,3,2,1,2,4,5,3,1,2,4,3,3,2,1,2,
       4,3,2,3,1,5,1,5,1,2,1,2,3,1,3,2,1,5,3,1,3,6,2,3,4,
       2,1,2,1,2,4,3,2,4,2,3,4,3,2,1,2,3,4,2,1,2,1,5,1,5,
       1,2,3,3,1,5,1,2,3,4,3,3,3,2,3,6,3,1,2,4,3,2,3,1,2,
       4,3,3,2,3,3,1,3,3,2,1,5,1,5,1,3,2,3,1,3,2,6,3,1,3,
       2,1,3,2,3,4,2,1,2,1,9,2,3,1,2,3,1,6,2,1,6,3,2,1,2,
       6,1,5,3,1,2,3,1,3,3,2,3,3,1,5,1,5,3,4,3,2,1,2,4,3,
       2,3,1,2,3,1,3,3,3,2,3,1,3,2,1,3,5,6,3,1,5,1,3,2,1,
       2,3,3,1,5,1,3,2,7,2,1,2,1,2,4,3,2,3,1,5,1,3,3,2,3,
       3,1,3,2,1,2,6,1,6,2,1,2,3,1,5,1,2,3,3,1,3,2,1,3,2,
       7,2,1,2,1,2,7,2,3,1,5,1,3,3,3,2,3,1,5,3,1,6,5,1,2,
       1,2,3,1,3,2,3,3,3,4,2,1,3,2,3,4,2,1,2,7,3,5,3,3,1,
       3,3,2,1,2,3,1,3,3,3,5,1,5,1,2,1,2,3,4,2,1,2,7,3,2,
       1,3,2,3,6,1,2,1,2,4,3,2,4,2,3,1,3,5,1,2,3,1,3,2,1,
       2,1,5,1,5,1,2,3,3,4,3,2,3,3,1,3,2,1,3,5,4,2,1,5,4,
       3,2,3,1,2,3,4,3,2,1,5,1,5,1,2,1,5,1,5,1,2,1,2,4,3,
       2,1,2,3,3,1,3,2,4,2,3,4,2,1,3,2,4,3,2,3,3,3,1,3,3,
       2,1,2,3,1,3,2,1,2,1,5,6,1,3,2,3,1,3,2,1,2,6,4,2,1,
       8,4,2,1,2,1,2,4,8,1,2,4,6,2,1,2,3,1,3,2,3,1,6,5,1,
       2,1,2,3,1,3,2,1,2,3,3,1,3,3,3,2,3,4,2,3,1,2,4,3,2,
       4,2,3,1,3,3,2,1,2,3,4,2,1,2,1,5,1,5,1,2,1,5,1,5,1,
       2,3,4,3,2,1,3,2,3,4,5,1,2,4,5,3,1,2,3,1,3,3,2,3,4,
       3,3,2,1,5,1,5,1,2,1,2,3,1,3,2,1,5,3,1,3,2,4,2,3,4,
       2,1,2,1,6,3,2,3,1,2,3,7,2,1,2,4,3,2,1,2,1,5,1,5,3,
       3,3,1,3,2,1,2,3,3,1,3,3,5,3,7,2,1,2,4,3,2,3,1,2,4,
       3,3,3,2,3,1,3,2,1,2,1,5,6,1,3,5,1,3,2,3,3,3,1,5,1,
       3,2,7,2,1,2,1,2,7,2,3,1,2,3,1,3,3,2,1,5,1,3,2,1,2,
       6,1,6,2,1,2,3,1,3,3,2,3,3,1,5,1,3,2,3,4,2,1,2,1,2,
       7,2,3,1,5,1,3,3,2,1,2,3,1,5,1,3,6,5,3,1,2,3,1,3,2,
       3,3,3,1,3,2,1,3,2,3,4,2,1,2,3,4,3,5,1,5,1,3,3,2,3,
       3,1,3,2,1,3,5,1,6,2,1,2,3,6,1,2,6,1,3,2,1,3,2,9,1,
       2,1,2,4,3,2,3,1,2,3,1,3,6,2,3,1,3,2,3,1,5,1,5,1,2,
       3,3,1,3,3,2,3,3,4,2,1,3,2,3,4,2,1,3,6,3,2,3,3,3,4,
       3,2,1,5,1,3,3,2,1,5,1,5,1,2,1,2,4,3,2,1,2,3,4,3,2,
       4,2,3,4,2,1,2,1,2,4,3,2,6,3,1,3,5,1,2,3,1,3,2,1,2,
       1,5,1,5,1,3,2,3,4,2,1,2,3,3,4,2,1,3,5,4,2,1,2,3,4,
       5,3,1,2,4,3,3,2,1,2,3,1,5,3,1,5,1,5,1,2,1,2,4,3,2,
       1,2,3,3,1,3,3,3,2,3,4,2,1,3,2,4,3,2,4,2,3,1,3,3,2,
       1,2,3,4,2,1,2,1,5,6,1,2,1,2,3,1,5,1,2,7,3,2,1,5,3,
       4,2,3,1,2,4,3,5,1,2,3,1,6,2,3,3,1,3,3,2,1,6,5,1,2,
       1,2,3,1,3,2,1,5,3,1,3,2,1,3,2,3,4,2,3,1,6,3,2,3,1,
       2,3,1,6,2,1,2,7,2,1,2,1,5,1,5,3,1,5,1,3,2,1,2,3,3,
       1,3,2,1,5,3,4,3,2,1,2,4,5,3,1,2,3,1,3,3,3,2,4,3,2,
       1,2,1,5,6,1,2,1,5,1,3,2,1,5,3,1,5,4,2,7,2,1,2,1,2,
       4,3,2,3,1,2,3,4,3,2,1,2,3,1,3,2,1,2,6,1,6,2,3,3,1,
       3,2,1,2,3,3,1,3,3,3,2,3,6,1,2,1,2,7,2,3,1,6,3,3,2,
       1,2,3,1,5,1,2,1,6,5,1,3,2,3,1,3,2,3,3,3,1,3,2,1,3,
       2,3,4,2,1,2,3,7,5,1,2,3,1,3,3,2,1,5,1,3,2,1,8,1,5,
       1,2,1,2,3,4,3,2,6,1,5,1,3,2,3,6,1,2,1,2,4,3,2,3,1,
       2,3,1,3,5,1,2,3,1,3,2,1,3,5,1,5,3,3,3,1,3,3,2,3,3,
       1,3,2,1,3,2,3,4,2,1,3,2,4,3,2,3,1,5,4,3,2,6,1,3,2,
       1,2,1,5,1,6,2,1,2,4,5,1,2,3,3,1,3,2,4,2,7,2,1,2,1,
       2,4,3,2,3,3,3,1,3,3,3,2,3,1,3,2,3,1,5,1,5,1,3,2,3,
       1,3,2,1,2,3,3,4,2,1,3,5,4,2,1,2,1,6,5,3,3,4,3,3,2,
       1,2,3,1,3,5,1,5,1,5,1,2,1,2,3,1,3,2,1,2,3,4,3,3,3,
       2,3,4,2,1,2,1,2,4,3,2,4,2,3,1,3,5,1,2,3,4,2,1,2,1,
       5,1,5,1,2,1,2,3,6,1,2,3,4,3,2,1,3,5,4,2,3,3,4,3,2,
       3,1,2,3,1,3,3,2,3,3,1,6,2,1,5,1,5,1,2,1,2,4,3,2,1,
       5,3,1,3,2,1,3,2,3,4,2,1,3,6,3,2,3,1,2,3,1,6,2,1,2,
       4,3,2,1,2,1,5,6,3,1,2,3,1,3,2,1,2,6,1,3,2,1,5,3,4,
       3,2,1,2,4,3,5,1,2,3,1,6,3,2,3,1,3,2,1,2,1,11,1,2,1,
       5,1,3,2,1,2,3,3,1,5,1,3,2,7,2,3,1,2,4,3,2,3,1,2,3,
       1,3,3,2,1,2,3,4,2,1,2,6,1,6,2,1,5,1,3,2,1,2,3,3,1,
       3,2,1,3,2,3,4,3,2,1,2,9,3,1,5,1,3,3,2,1,2,4,5,1,2,
       1,6,5,1,2,1,2,3,1,3,2,6,3,1,3,2,4,2,3,4,2,1,2,3,4,
       3,5,1,2,3,4,3,2,1,2,3,1,3,2,1,3,5,1,5,1,2,3,3,4,2,
       1,2,6,1,3,3,3,2,3,6,1,2,1,2,4,3,2,3,1,2,4,3,5,1,2,
       3,1,3,2,1,2,1,5,1,5,1,5,3,1,3,5,3,3,1,3,2,1,3,2,3,
       4,2,1,3,2,7,2,3,1,2,3,4,3,2,1,5,1,3,2,1,2,6,1,5,1,
       2,1,2,4,3,3,2,3,3,1,5,4,2,3,4,2,1,2,1,2,4,3,2,3,3,
       3,1,3,3,2,1,2,3,1,3,2,1,3,5,1,5,4,2,3,1,3,2,1,2,3,
       3,4,2,1,3,5,4,2,1,2,1,2,4,5,3,1,6,3,3,2,3,3,1,3,2,
       3,1,5,1,6,2,1,2,3,1,5,1,2,3,3,1,3,3,3,2,7,2,1,2,1,
       2,4,3,2,4,2,3,1,3,3,3,2,3,4,2,3,1,5,1,5,1,2,1,2,3,
       1,5,1,2,3,7,2,1,3,2,3,4,2,3,1,6,3,2,3,3,3,1,3,3,2,
       3,3,1,3,3,2,1,5,1,5,1,2,1,2,3,1,3,2,1,5,4,3,2,1,3,
       2,3,4,2,1,2,1,6,3,2,4,2,3,1,8,1,2,4,3,2,1,2,1,5,1,
       5,3,1,2,3,4,2,1,2,3,3,1,3,2,1,8,4,3,2,3,4,3,2,3,1,
       2,3,1,3,3,3,2,3,1,5,1,2,1,5,6,1,2,1,6,3,2,1,2,3,3,
       1,5,1,3,2,7,2,1,3,2,4,3,2,3,1,2,3,1,3,3,2,1,2,3,1,
       3,2,1,2,6,7,2,1,2,3,1,3,2,1,2,6,1,3,2,1,5,3,4,2,1,
       2,1,2,7,5,1,5,1,6,2,1,2,3,1,5,1,2,1,6,5,1,2,1,2,3,
       1,3,2,3,3,3,1,3,2,1,3,2,3,4,2,3,3,4,3,5,1,2,3,1,3,
       3,2,1,2,3,4,2,1,3,5,1,5,1,2,1,5,4,2,1,2,6,1,3,2,1,
       3,2,3,7,2,1,2,4,5,3,1,2,3,1,3,5,1,2,4,3,2,1,2,1,5,
       1,5,1,2,3,3,1,3,3,5,3,1,3,2,4,2,3,4,2,1,3,2,4,3,2,
       3,1,2,3,4,3,2,1,5,1,3,2,1,2,1,5,1,5,1,2,3,4,3,2,1,
       2,3,3,1,3,6,2,3,6,1,2,1,2,4,3,2,3,3,4,3,3,2,1,2,3,
       1,3,2,1,2,1,5,1,5,1,3,2,3,1,3,2,3,3,3,4,2,1,3,5,4,
       2,1,2,1,2,9,3,1,2,4,3,3,2,1,5,1,3,2,3,6,1,5,1,2,1,
       2,3,1,3,3,2,3,3,1,6,3,2,3,4,2,1,2,1,2,4,3,2,4,2,3,
       1,3,3,2,1,2,3,4,2,1,3,5,1,5,3,1,2,3,1,5,1,2,3,4,3,
       2,1,3,2,3,4,2,3,1,2,4,3,2,3,1,5,1,3,3,2,3,3,1,3,3,
       2,1,5,1,6,2,1,2,3,1,5,1,5,3,1,3,2,1,3,2,7,2,1,2,1,
       6,3,2,3,1,2,3,1,6,3,2,4,3,2,3,1,5,1,5,3,1,2,3,1,3,
       2,1,2,3,3,4,2,1,5,3,4,3,2,1,6,3,2,3,3,3,1,3,3,3,2,
       3,1,3,3,2,1,5,6,1,2,1,5,1,3,2,1,2,3,4,5,1,3,2,7,2,
       1,2,1,2,4,3,2,4,2,3,1,3,5,1,2,3,1,3,2,1,2,6,1,6,2,
       1,2,3,4,2,1,2,3,3,1,3,2,1,3,5,4,2,1,2,3,7,2,3,1,5,
       1,3,3,2,1,2,3,1,5,1,2,1,6,5,1,2,1,2,4,3,2,3,3,3,1,
       3,2,1,3,2,3,4,2,1,5,4,3,5,1,2,3,1,3,3,2,1,2,3,1,3,
       2,1,3,5,6,1,2,1,2,3,4,2,1,2,6,1,3,2,1,5,3,6,1,2,1,
       2,4,3,5,1,2,3,1,8,1,2,3,1,3,2,1,2,1,6,5,1,2,3,3,1,
       3,3,2,3,3,1,3,2,1,3,2,3,4,2,4,2,4,3,2,3,1,2,3,4,3,
       2,1,5,4,2,1,2,1,5,1,5,1,2,1,6,3,2,1,2,3,3,1,3,2,4,
       2,3,4,3,2,1,2,4,5,3,3,3,1,3,3,2,1,2,4,3,2,1,2,1,5,
       1,5,1,3,2,3,1,3,2,1,5,3,4,2,4,5,4,2,1,2,1,2,4,5,3,
       1,2,7,3,2,1,2,3,1,3,2,3,1,5,1,5,1,2,3,3,1,3,2,1,2,
       3,3,1,3,3,3,2,3,6,1,2,1,2,4,3,2,4,2,4,3,3,2,1,2,3,
       4,2,1,2,1,5,1,5,1,3,2,3,1,5,3,3,4,3,2,1,3,2,3,4,2,
       3,1,2,7,2,3,1,2,3,1,3,3,2,6,1,3,3,2,6,1,5,1,2,1,2,
       3,1,3,3,5,3,1,5,1,3,2,3,4,2,1,2,1,6,3,2,3,1,2,3,1,
       6,2,1,2,4,3,2,1,3,5,1,5,3,1,2,3,1,3,2,1,2,3,3,1,3,
       2,1,5,3,4,3,2,1,2,4,3,2,3,1,5,1,3,3,5,3,1,3,2,1,2,
       1,5,7,2,1,5,1,5,1,2,3,3,1,5,1,3,2,7,2,1,2,1,2,4,3,
       2,3,1,2,3,1,3,3,3,2,3,1,3,2,3,6,1,6,2,1,2,3,1,3,2,
       1,2,3,3,4,2,1,3,2,3,4,2,1,2,1,9,2,3,6,1,3,3,2,1,2,
       3,1,6,2,1,6,5,1,2,1,2,3,1,3,2,3,3,4,3,2,1,3,2,3,4,
       2,1,2,3,4,3,6,2,3,1,3,5,1,2,3,1,3,2,1,3,5,1,5,1,2,
       1,2,3,4,2,1,2,6,1,3,2,1,3,5,6,1,2,3,4,3,2,3,1,2,3,
       1,3,5,1,2,3,1,5,1,2,1,5,1,5,1,2,3,4,3,3,2,3,3,1,3,
       2,1,3,2,3,4,2,1,3,2,4,3,2,3,1,2,3,4,3,2,1,5,1,3,2,
       1,2,1,5,6,1,2,1,2,4,3,2,1,2,6,1,3,2,6,3,4,2,1,2,1,
       2,4,3,5,3,3,1,6,2,1,2,3,1,3,2,1,2,1,6,5,1,3,2,3,1,
       3,2,1,2,3,3,4,2,1,3,5,4,2,3,1,2,4,5,3,1,2,4,3,3,2,
       1,2,3,4,2,3,1,5,1,5,1,2,1,5,1,3,2,1,2,3,3,1,3,3,3,
       2,3,4,3,2,1,2,4,5,4,2,3,1,3,3,2,1,2,7,2,1,2,1,5,1,
       5,1,2,1,2,3,1,5,1,5,4,3,2,4,2,3,4,2,3,1,2,4,3,2,3,
       1,2,3,4,3,2,3,3,1,3,3,2,1,5,1,5,1,2,3,3,1,3,2,1,5,
       3,1,3,3,3,2,3,6,1,2,1,6,3,2,3,1,2,4,6,2,1,2,4,3,2,
       1,2,1,5,1,5,4,2,3,1,3,2,3,3,3,1,3,2,1,5,3,4,3,2,1,
       2,7,2,3,1,2,3,1,3,3,3,5,1,3,2,1,2,6,6,1,2,1,5,1,3,
       3,2,3,3,1,5,1,3,2,7,2,1,2,1,2,4,3,2,3,1,2,3,1,3,3,
       2,1,2,3,1,3,2,1,8,1
      );

type { TSieveState }

     TSieveState=class
      public
       Items:array of TNativeUInt;
       MaxInts:TNativeUInt;
       constructor Create(const aMaxInts:TNativeUInt); reintroduce;
       destructor Destroy; override;
       procedure Clear;
       procedure Run;
       function CountPrimes:TNativeUInt;
     end;

{ TSieveState }

constructor TSieveState.Create(const aMaxInts:TNativeUInt);
begin
 inherited Create;
 MaxInts:=aMaxInts;
 SetLength(Items,(MaxInts shr 1) or 1);
end;

destructor TSieveState.Destroy;
begin
 Items:=nil;
 inherited Destroy;
end;

procedure TSieveState.Clear;
begin
 FillChar(Items[0],((MaxInts shr 1) or 1)*SizeOf(TNativeUInt),#0);
end;

procedure TSieveState.Run;
var LocalItems:PNativeUInts;
    LocalHalfMaxInts,q,Step,IStep,Inc_,NInc,HalfFactor,HalfQ,Factor,Index:TNativeUInt;
    p:PNativeInt;
begin
 LocalItems:=@Items[0];
 LocalHalfMaxInts:=MaxInts shr 1;
 q:=trunc(sqrt(MaxInts))+1; // usqrt(MaxInts)+1;
 Step:=1;
 Inc_:=Steps[Step];
 HalfFactor:=17 shr 1;
 HalfQ:=q shr 1;
 while HalfFactor<=HalfQ do begin
  // Search for next prime
  if (LocalItems^[HalfFactor shr SHIFT] and TNativeUInt(TNativeUInt(1) shl (HalfFactor and MASK)))=0 then begin
    // Mask all integer multiples of this prime
   Factor:=(HalfFactor shl 1)+1;
   Index:=(Factor*Factor) shr 1;
   IStep:=Step;
   NInc:=Steps[IStep];
   while Index<LocalHalfMaxInts do begin
    p:=@LocalItems^[Index shr SHIFT];
    p^:=p^ or TNativeUInt(TNativeUInt(1) shl (Index and MASK));
    inc(Index,Factor*NInc);
    inc(IStep);
    if IStep=CountSteps then begin
     IStep:=0;
    end;
    NInc:=Steps[IStep];
   end;
  end;
  inc(HalfFactor,Inc_);
  inc(Step);
  if Step=CountSteps then begin
   Step:=0;
  end;
  Inc_:=Steps[Step];
 end;
end;

function TSieveState.CountPrimes:TNativeUInt;
var LocalItems:PNativeUInts;
    Factor,Step,Inc_:TNativeUInt;
begin
 LocalItems:=@Items[0];
 result:=6; // We already have 2, 3, 5, 7, 11, and 13 ...
 Factor:=17; // ...
 Step:=1; // From 7 to 11
 Inc_:=Steps[Step] shl 1; // Next increment in steps array
 while Factor<=MaxInts do begin
  if (LocalItems^[Factor shr (SHIFT+1)] and TNativeUInt(TNativeUInt(1) shl ((Factor shr 1) and MASK)))=0 then begin
   inc(result);
  end;
  inc(Factor,Inc_);
  inc(Step);
  if Step=CountSteps then begin
   Step:=0;
  end;
  Inc_:=Steps[Step] shl 1;
 end;
end;

var ValidPrimes,Passes,CountPrimes:TNativeUInt;
    Start,Stop,Elapsed:{$if declared(QWord)}QWord{$else}UInt64{$ifend};
{$ifdef UsePasMP}
    Index:Int32;
    PasMPInstance:TPasMP;
    SieveStates:array of TSieveState;
{$else}
    SieveState:TSieveState;
{$endif}

{$ifdef UsePasMP}
procedure PasMPParallelForProcedure(const Job:PPasMPJob;const ThreadIndex:TPasMPInt32;const Data:pointer;const FromIndex,ToIndex:TPasMPNativeInt);
var Index:TPasMPNativeInt;
begin
 for Index:=FromIndex to ToIndex do begin
  SieveStates[Index].Clear;
  SieveStates[Index].Run;
 end;
end;
{$endif}

begin
 case MaxInts of
  10:begin
   ValidPrimes:=4;
  end;
  100:begin
   ValidPrimes:=25;
  end;
  1000:begin
   ValidPrimes:=168;
  end;
  10000:begin
   ValidPrimes:=1229;
  end;
  100000:begin
   ValidPrimes:=9592;
  end;
  1000000:begin
   ValidPrimes:=78498;
  end;
  10000000:begin
   ValidPrimes:=664579;
  end;
  100000000:begin
   ValidPrimes:=5761455;
  end;
  1000000000:begin
   ValidPrimes:=50847534;
  end;
  else begin
   ValidPrimes:=0;
  end;
 end;
 Passes:=0;
 Start:=GetTickCount64;
{$ifdef UsePasMP}
 PasMPInstance:=TPasMP.Create(-1,0,false,false,false,false{,TThreadPriority.tpHigher});
 SetLength(SieveStates,Max(1,PasMPInstance.CountJobWorkerThreads));
 for Index:=Low(SieveStates) to High(SieveStates) do begin
  SieveStates[Index]:=TSieveState.Create(MaxInts);
 end;
{$else}
 SieveState:=TSieveState.Create(MaxInts);
{$endif}
 repeat
{$ifdef UsePasMP}
  PasMPInstance.Invoke(PasMPInstance.ParallelFor(0,Low(SieveStates),High(SieveStates),PasMPParallelForProcedure,1,PasMPDefaultDepth,nil));
  inc(Passes,length(SieveStates));
{$else}
  SieveState.Clear;
  SieveState.Run;
  inc(Passes);
{$endif}
  Stop:=GetTickCount64;
  Elapsed:=Stop-Start;
  if Elapsed>=10000 then begin // 10 seconds
{$ifdef UsePasMP}
   CountPrimes:=SieveStates[0].CountPrimes;
{$else}
   CountPrimes:=SieveState.CountPrimes;
{$endif}
   if CountPrimes=ValidPrimes then begin
    writeln('benjaminrosseaux_5760of30030_epar;',Passes,';',Elapsed*0.001:4:2,';1;algorithm=wheel,faithful=yes,bits=1');
   end else begin
    writeln('failed');
   end;
   break;
  end;
 until false;
{$ifdef UsePasMP}
 FreeAndNil(PasMPInstance);
 for Index:=Low(SieveStates) to High(SieveStates) do begin
  FreeAndNil(SieveStates[Index]);
 end;
 SieveStates:=nil;
{$else}
 FreeAndNil(SieveState);
{$endif}
{$if defined(Win32) or defined(Win64) or defined(Windows)}
 if IsDebuggerPresent then begin
  readln;
 end;
{$ifend}
end.
